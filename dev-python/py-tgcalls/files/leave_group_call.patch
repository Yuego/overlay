diff --git a/pytgcalls/methods/groups/leave_group_call.py b/pytgcalls/methods/groups/leave_group_call.py
index df44120..c9f2b9e 100644
--- a/pytgcalls/methods/groups/leave_group_call.py
+++ b/pytgcalls/methods/groups/leave_group_call.py
@@ -13,8 +13,9 @@ from ...types.session import Session
 
 class LeaveGroupCall(Scaffold):
     async def leave_group_call(
-        self,
-        chat_id: Union[int, str],
+            self,
+            chat_id: Union[int, str],
+            force: bool = False,
     ):
         """Leave a group call
 
@@ -24,6 +25,8 @@ class LeaveGroupCall(Scaffold):
              chat_id (``int`` | ``str``):
                 Unique identifier of the target chat.
                 Can be a direct id (int) or a username (str)
+             force (``bool``):
+                Force disconnect WebRTC, when Group Call already ended.
 
         Raises:
             NoMtProtoClientSet: In case you try
@@ -66,7 +69,7 @@ class LeaveGroupCall(Scaffold):
                 chat_call = await self._app.get_full_chat(
                     chat_id,
                 )
-                if chat_call is not None:
+                if chat_call is not None or force:
                     solver_id = Session.generate_session_id(24)
 
                     async def internal_sender():
@@ -78,6 +81,7 @@ class LeaveGroupCall(Scaffold):
                             'type': 'requested',
                             'solver_id': solver_id,
                         })
+
                     asyncio.ensure_future(internal_sender())
                     result = await self._wait_result.wait_future_update(
                         solver_id,
